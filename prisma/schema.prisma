// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id          String      @id @default(cuid())
    name        String
    comment     String
    likes       Like[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    eventId     String
    event       Event[]

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Like {
    id          String @id @default(cuid())
    userId      String
    user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId      String?
    comment     Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
    eventId     String?
    event       Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    posts           Post[]
    organizations   Organization[] 
    sponsorships    Sponsorship[]
    events          Event[]
    likes           Like[]
}

model Organization {
    id              String  @id @default(cuid())
    name            String
    users           User[]
    sponsorships    Sponsorship[]
}

model Sponsorship {
    id              String @id @default(cuid())
    orgId           String?
    organization    Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    name            String
    eventId         String
    event           Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    userId          String
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    sponsorComment  String
}

model Event {
    id              String @id @default(cuid())
    name            String
    eventType       EventType
    sponsorships    Sponsorship[]
    coordinates     Int[]
    users           User[]
    comments        Post[]
    likes           Like[]
}

enum EventType {
    IDEA
    FUN_EVENT
    FIX_EVENT
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Achievement {
    id      String  @id @default(cuid())
    name    String

    
}