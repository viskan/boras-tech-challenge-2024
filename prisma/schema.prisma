// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Comment {
    id          Int @id @default(autoincrement())
    comment     String
    likes       Like[]
    eventId     Int
    event       Event @relation(fields: [eventId], references: [id])
    userId      String
    user        User  @relation(fields: [userId], references: [id])
}

model Like {
    id          Int @id @default(autoincrement())
    userId      String
    user        User @relation(fields: [userId], references: [id], onDelete: NoAction)
    commentId   Int?
    comment     Comment? @relation(fields: [commentId], references: [id], onDelete: NoAction)
    eventId     Int?
    event       Event? @relation(fields: [eventId], references: [id], onDelete: NoAction)
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires      DateTime
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    session         Session[]
    comments        Comment[]
    organizations   Organization[] 
    sponsorships    Sponsorship[]
    events          Event[] @relation("eventUsers")
    createdEvents   Event[] @relation("creator")
    likes           Like[]
}

model Organization {
    id              Int @id @default(autoincrement())
    name            String
    users           User[]
    sponsorships    Sponsorship[]
}

model Sponsorship {
    id              Int @id @default(autoincrement())
    orgId           Int?
    organization    Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    name            String
    eventId         Int
    event           Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    userId      String
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
    sponsorComment  String
}

model Event {
    id              Int @id @default(autoincrement())
    name            String
    eventType       EventType
    sponsorships    Sponsorship[]
    latitude        Float
    longitude       Float
    users           User[] @relation("eventUsers")
    creatorId       String
    creator         User    @relation("creator", fields: [creatorId], references: [id])
    comments        Comment[]
    likes           Like[]
}

enum EventType {
    IDEA
    FUN_EVENT
    FIX_EVENT
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Achievement {
    id      Int @id @default(autoincrement())
    name    String
}